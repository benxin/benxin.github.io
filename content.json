[{"title":"Debian 登录后成功,却看不到桌面解决方法.","date":"2019-08-06T03:43:46.030Z","path":"2019/08/06/Debian-desktop-error/","text":"Debian 登录后成功,却看不到桌面解决方法.事件可能原因?今天上重启了系统之后,和以往一样正常登录操作系统,输入密码登录成功!却发现桌面除了背景图片什么也看不到,也无法使用terminal,这时候先想到了万能的重启,好的重启试试,再次登录发现问题依旧,如是我在想最近执行了什么操作,思考了一会想起,好像昨天执行了卸载gnome-shell相关的操作.在想这能是与这个有关.好了废话不多说,下面看下解决方法. 解决方法. 重启系统让画面停留在登陆界面,如下图: Debian-login 登录GUI控制台,使用快捷键 : CTRL+alt+f2 看到如下界面. login 在此界面使用你的账户密码进行登录,成功登录如下图: Debian-gui 卸载重装gnome 123456789# 卸载sudo apt-get autoremove gdm3sudo apt-get autoremove --purge gnome*# 重启sudo shutdown -r now #或者使用 sudo reboot # 重启后登录系统,重新安装gnomesudo apt install gnomeapt-get install task-gnome-desktop","tags":[{"name":"Debian","slug":"Debian","permalink":"https://benxin.xyz/tags/Debian/"}]},{"title":"使用PyMySQL库连接MySQL数据库实现增删改查","date":"2019-08-05T09:49:30.523Z","path":"2019/08/05/PyMySQL-action/","text":"使用PyMySQL库连接MySQL数据库实现增删改查 先决条件数据库版本要求 MySQL &gt;= 5.5 MariaDB &gt;= 5.5 安装PyMySQL 1python3 -m pip install PyMySQL 部分参数说明 12345678910111213141516171819202122232425# PyMySQL 相关参数# 连接数据库host # 服务器ipuser # 数据库用户名password # 数据库密码db # 连接的数据charset # 数据库通信使用的字符集cursors.DictCursor # 将结果作为字典类型数据返回的游标 # Python字典是散列表的实现,在平均情况下查找,增加和删除时间复杂度为O(1)connection = pymysql.connect(host='localhost', user='user', password='passwd', db='db', charset='utf8', cursorclass=pymysql.cursors.DictCursor)# 创建游标cursor = db.cursor()# 关闭游标cursor.close()# 执行sql语句cursor.execute(sql)# 提交数据到数据库db.commit()# 回滚操作db.rollback() demo 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#!usr/bin/env python# -*- coding:utf-8 _*-\"\"\"@Author: benxin@File: sql_demo.py\"\"\"from pymysql import connect, cursorsclass SqlAction(): '''数据库曾删改查''' def __init__(self): self.connection = connect(host='localhost', user='root', password='pwd', db='db01', charset='utf8mb4', cursorclass=cursors.DictCursor) def query_data(self, query): # 查询数据 if query: with self.connection.cursor() as cursor: sql = query cursor.execute(sql) try: self.connection.commit() except: self.connection.rollback() else: # 查询单条 # result = cursor.fetchone() # 查询多条数据 result = cursor.fetchall() for row in result: if row: print(row['name'], row['age'], row['gender']) def insert_data(self, insert): # 插入数据 if insert: with self.connection.cursor() as cursor: sql = insert cursor.execute(sql) try: self.connection.commit() except: self.connection.rollback() def update_data(self, update): # 更新数据 if update: with self.connection.cursor() as cursor: sql = update cursor.execute(sql) try: self.connection.commit() except: self.connection.rollback() def delete_data(self, delete): # 删除数据 if delete: with self.connection.cursor() as cursor: sql = delete cursor.execute(sql) try: self.connection.commit() except: self.connection.rollback() def close(self): # 关闭连接 self.connection.close()def run(): query = \"select * from students;\" insert = \"insert into students (id,name,age,height,address) values(0,'郭靖',27,178.00,'蒙古');\" update = \"update students set height=181.00 where name like '_靖';\" delete = \"delete from students where name like '%靖';\" mysql = SqlAction() mysql.query_data(query) # mysql.insert_data(insert) # mysql.update_data(update) # mysql.delete_data(delete) mysql.close()run()","tags":[{"name":"PyMySQL","slug":"PyMySQL","permalink":"https://benxin.xyz/tags/PyMySQL/"}]},{"title":"MySQL主从配置(适用于MySQL 8.0+)","date":"2019-08-04T17:28:14.287Z","path":"2019/08/05/MySQL Master-Slave/","text":"MySQL主从配置(适用于MySQL 8.0+) 配置主服务器12345主MySQL Server: 10.0.0.3从MySQL Server: 10.0.0.4# 编辑主服务器配置文件sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 将以下配置信息粘贴至mysqld.cnf 文件 123bind-address = 10.0.0.3server-id = 1log_bin = /var/log/mysql/mysql-bin.log 重启MySQL服务 1sudo service mysql restart 创建一个新账户用于连接从服务器12345678910 # 创建用户 create user rpl_user@10.0.0.4 identified by 'password'; # 授权用户grant replication slave on *.* to rpl_user@10.0.0.4; # 确认授权show grants for replica_user@10.0.0.4;# 查看主服务器状态show master status\\G 配置从服务器12# 编辑从服务器配置文件sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf 将以下配置信息粘贴至mysqld.cnf 文件. 123bind-address = 10.0.0.4server-id = 2log_bin = /var/log/mysql/mysql-bin.log 重启MySQL服务 1sudo service mysql restart 登录从服务器 1mysql -u root -p 设置从服务器获取主服务器信息 1234567# MASTER_LOG_POS 使用命令show master status\\G查看的File:mysql-bin.xx 对应填写即可 # MASTER_LOG_FILE 使用命令show master status\\G查看的Position: xx 对应填写即可 CHANGE MASTER TO MASTER_HOST='10.0.0.3',MASTER_USER='rpl_user',MASTER_PASSWORD='password',MASTER_LOG_FILE='mysql-bin.000002',MASTER_LOG_POS=155; 启动从属线程 1start slave; 检查MySQL从服务器状态 1show slave status\\G 检查是否配置成功 登录主MySQL服务器创建一个新数据用来测试 1234# 登录主MySQL服务器mysql -uroot -p# 创建一个新数据库create database test_db charset='utf8'; 登录从MySQL服务器查看是否产生新数据 12mysql -uroot -pshow databases; MySQL数据库账户管理思维导图 HTML版 download","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://benxin.xyz/tags/MySQL/"}]},{"title":"Debian安装MySQL","date":"2019-08-04T08:55:38.671Z","path":"2019/08/04/debian install mysql/","text":"debian 安装 MySQL 下载MySQL存储库.123https://dev.mysql.com/downloads/repo/apt/wget https://repo.mysql.com//mysql-apt-config_0.8.13-1_all.debsudo dpkg -i *.deb 更新源,从MySQL存储库更新包信息.1sudo apt update 安装MySQL.12# 在线安装sudo apt-get install mysql-server 离线deb包安装 MySQL url12# 选择需要的版本下载完成后,执行以下命令.dpkg -i *.deb MySQL服务.12345 # 查看状态(status) | 停止(stop) | 启动(start) | 重启(restart) sudo service mysql status # 也可以这么写sudo systemctl restart mysql 安装过程错误处理.123456789101112update-alternatives: 错误: 候选项路径 /etc/mysql/mysql.cnf 不存在dpkg: 处理软件包 mysql-server-5.7 (--configure)时出错： 子进程 已安装 post-installation 脚本 返回错误状态 2dpkg: 依赖关系问题使得 mysql-server 的配置工作不能继续： mysql-server 依赖于 mysql-server-5.7；然而： 软件包 mysql-server-5.7 尚未配置。dpkg: 处理软件包 mysql-server (--configure)时出错： 依赖关系问题 - 仍未被配置sudo apt-get remove --purge mysql-\\*sudo apt-get install mysql-server mysql-client","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://benxin.xyz/tags/MySQL/"}]},{"title":"Debian简单的防火墙ufw规则设置","date":"2019-08-04T08:02:17.381Z","path":"2019/08/04/Debian-Firewall/","text":"Debian防火墙简单配置 安装简单的防火墙(ufw)sudo apt-get install ufw 防火墙基本规则12345678# 启用sudo ufw enable # 禁用sudo ufw disable# 重置sudo ufw reset# 重启sudo ufw reload 设置默认规则12sudo ufw default deny incomingsudo ufw default allow outgoing 查看规则12345678910111213141516171819202122sudo ufw status verbose# 或者这么写sudo ufw status[sudo] benxin 的密码：Status: activeLogging: on (low)Default: deny (incoming), allow (outgoing), disabled (routed)New profiles: skipTo Action From-- ------ ----22/tcp ALLOW IN Anywhere 22 ALLOW IN Anywhere 80/tcp ALLOW IN Anywhere 443/tcp ALLOW IN Anywhere 22233 ALLOW IN Anywhere 22/tcp (v6) ALLOW IN Anywhere (v6) 22 (v6) ALLOW IN Anywhere (v6) 80/tcp (v6) ALLOW IN Anywhere (v6) 443/tcp (v6) ALLOW IN Anywhere (v6) 22233 (v6) ALLOW IN Anywhere (v6) 设置规则,ufw默认禁止所有传入连接,所以需要进行简单的设置.12345# 开放ssh接入sudo ufw allow ssh# 拒绝ssh服务sudo ufw deny ssh 端口访问规则1234567891011121314151617# 允许使用通过tcp传输协议使用1000-2000范围的端口sudo ufw allow 1000:2000/tcp# 允许使用通过udp传输协议使用1000-2000范围的端口sudo ufw allow 1000:2000/udp# 允许所有通过80端口使用tcp协议的数据sudo ufw allow 80/tcp# 拒绝所用使用53端口的数据(tcp/udp)sudo ufw deny 53# 删除规则sudo ufw delete allow 80/tcp# 按协议删除规则sudo ufw delete allow http IP访问规则1234567891011# 允许的IP地址范围从 10.0.0.22 到 10.0.0.254 sudo ufw allow from 10.0.0.22/24# 允许22端口sudo ufw allow from 10.0.0.22# ip+端口限制,允许的IP地址范围从 10.0.0.22 到 10.0.0.254 使用22端口 sudo ufw allow from 10.0.0.22/24 to any port 22# ip+端口+协议限制, 允许10.0.0.22 通过22端口tcp协议sudo ufw allow from 10.0.0.22 to any port 22 proto tcp 12345# 拒绝IP 10.0.0.22 访问sudo ufw deny from 10.0.0.22# 拒绝IP 10.0.0.22 使用22端口访问sudo ufw deny from 10.0.0.22 to any port 22 获取帮助信息1man ufw","tags":[{"name":"ufw","slug":"ufw","permalink":"https://benxin.xyz/tags/ufw/"}]},{"title":"使用命令将Debian 9 更新至最新版本 Debian ‎10 (Buster)","date":"2019-08-03T04:30:36.748Z","path":"2019/08/03/debian-update/","text":"Debian ‎10 (Buster) 7月6号发布当天我就更新了，截至今天都快一个月了，这期间使用都非常稳定，今天就记录下更方式。 更新镜像文件 123456789101112131415161718sudo -inano /etc/apt/sources.list# 将以下镜像url粘贴至你的sources.list文件上,或继续使用你之前使用的源.# debian-officialdeb http://security.debian.org/ buster/updates maindeb-src http://security.debian.org/ buster/updates main# awsdeb http://cdn-aws.deb.debian.org/debian stable maindeb http://cdn-aws.deb.debian.org/debian-security stable/updates maindeb https://deb.debian.org/debian stable maindeb https://deb.debian.org/debian-security stable/updates main# huaweideb https://mirrors.huaweicloud.com/debian/ buster main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ buster-updates main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ buster-backports main contrib non-free 继续使用你之前使用Debian源 ,使用以下命令全局替换stretch 至 buster 12sed -i 's/stretch/buster/g' /etc/apt/sources.listsed -i 's/stretch/buster/g' /etc/apt/sources.list.d/*.list 更新 1apt update 升级系统 12apt-get upgradeapt-get dist-upgrade 清除系统安装后不需要的软件 12apt autoremoveapt clean 重启系统 123shutdown -r now# 重启如果发现桌面没有了, 只剩下一个黑窗口不用慌安装下桌面即可.sudo apt install gnome 查看版信息 123lsb_release -a# 使用screenfetch查看更加详细的信息apt install screenfetch","tags":[{"name":"Debian","slug":"Debian","permalink":"https://benxin.xyz/tags/Debian/"}]},{"title":"Debian&Ubuntu 更新内核","date":"2019-08-02T17:37:16.920Z","path":"2019/08/03/update-Kernel/","text":"本文介绍如何将Debian内核更新至最新版本 更换国内源 备份原来的源文件 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 编辑源文件 sudo nano /etc/apt/sources.list 清华大学开源镜像 华为开源镜像 可以根据自己的需求,去以上两个站点查看想要的源,这两个站点的速度都比较快,更新也很及时. 也可以直接使用我拷贝好的,Debian的安全更新源这里我使用的是官方和清华的. Ubuntu 可以去以上两站点查看相应的源进行配置,我自己在用Debian因为比较稳定. 粘贴以下内容到你的sources.list文件 CTRL+x 保存退出 1234567891011121314# debian-officialdeb http://security.debian.org/ buster/updates maindeb-src http://security.debian.org/ buster/updates main# huaweideb https://mirrors.huaweicloud.com/debian/ buster main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ buster-updates main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ buster-backports main contrib non-free# tsinghuadeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free 更新 1sudo apt update 查看当前内核版本 1uname -ra 查找可更新的内核 1apt-cache search linux-image | grep amd64 安装内核 1sudo apt install -t buster linux-image-amd64 更新GRUB的启动菜单配 12sudo update-grubsudo shutdown -r now 清除旧的内核 12345678# 查看旧内核sudo dpkg --list 'linux-image*' # 将4.xx替换成实际要卸载的版本号, 例如要卸载的是: linux-image-4.19.0-5-amd64 就将4.xx改成4.19sudo apt-get remove linux-image-4.xxsudo apt-get autoremove# 查看下新版本的内核信息uname -ra 开启 bbr 12echo \"net.core.default_qdisc=fq\" &gt;&gt; /etc/sysctl.confecho \"net.ipv4.tcp_congestion_control=bbr\" &gt;&gt; /etc/sysctl.conf 查看效果 123$ sudo lsmod | grep bbr # 开启成功效果如下tcp_bbr 20480 29","tags":[{"name":"Kernel","slug":"Kernel","permalink":"https://benxin.xyz/tags/Kernel/"}]},{"title":"SSH - 远程主机识别已更改，产生错误。","date":"2019-08-01T15:07:41.229Z","path":"2019/08/01/ssh-keygen-wrong/","text":"记录下今天连接vps出现的问题,因为重装系统由CentOS切换到了Debian,但是本地客户端还储存着远程主机之前的公钥信息导致以下错误。错误信息： WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 。解决方法，移除本地主机储存的密钥1234567# 拷贝密钥到远程计算机调试ssh-copy-id root@ip -p port -vvWARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! # 上stackoverflow 说使用这个最简单的方法但问题没有解决。# &lt;host&gt; 远程计算机名/ipssh-keygen -R &lt;host&gt; 移除主机之前的标识信息解决问题！123456# 暴力解决，移除文件让它重新生成！rm ~/.ssh/known_hosts# 也可以这么做，清空文件echo '' &gt; ~/.ssh/known_hosts重新上传公钥okssh-copy-id root@ip -p port","tags":[{"name":"ssh-keygen","slug":"ssh-keygen","permalink":"https://benxin.xyz/tags/ssh-keygen/"}]},{"title":"使用Python和Selenium 模拟豆瓣登录.","date":"2019-08-01T15:07:41.225Z","path":"2019/08/01/Python+Selenium/","text":"安装ChromeDriver和Selenium 这里chrome选择,需要根据你所使用的chrome版本下载 比如我用的是74.0.3729.40（正式版本）所以选择74.xxx 版本的 ChromeDriver.123456789101112131415161718pip3 install selenium# 这里我用的是官方的下载地址,因为官网404了,如果你没有科学上网,也可以使用阿里的镜像进行下载安装.# 如果你以具有科学上网环境,也可以从官网下载安装. sudo vi /etc/wgetrc # 配置wget使用代理,在配置文件中添加以下四行代码,这样你就可以使用官方的地址安装ChromeDriver. https_proxy = 127.0.0.1:1080http_proxy = 127.0.0.1:1080ftp_proxy = 127.0.0.1:1080use_proxy = onwget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip# 阿里镜像urlwget https://npm.taobao.org/mirrors/chromedriver/74.0.3729.6/chromedriver_linux64.zipunzip chromedriver_linux64.zip # 如果出现无法定位unzip软件包,安装一下即可.chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriversudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver 如果你和我用的chrome版本不同，可以根据实际版本选择下载，当然也可直接更新你的Chrome到74+版本。ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/downloads) demo 123456789from selenium import webdriverdriver = webdriver.Chrome()driver.get(\"https://www.douban.com\")driver.switch_to.frame(0)driver.find_element_by_class_name(\"account-tab-account\").click()driver.find_element_by_id(\"username\").send_keys(\"your_username\")driver.find_element_by_id(\"password\").send_keys(\"your_password\")driver.find_element_by_partial_link_text(\"登录豆瓣\").click()","tags":[{"name":"Python","slug":"Python","permalink":"https://benxin.xyz/tags/Python/"}]},{"title":"Git 使用代理","date":"2019-08-01T15:07:41.213Z","path":"2019/08/01/git-proxy/","text":"Git 使用代理 有时候我们需要克隆一些比较大的文件时,因为网络环境的关系,这个时候就需要通过代理来提高速度. 先决条件 电脑已配置科学上网环境 方法一使用命令行1234567891011# 以下使用http代理git config --global http.proxy http://127.0.0.1:1080git config --global https.proxy https://127.0.0.1:1080# 以下使用socks5代理git config --global http.proxy socks5://127.0.0.1:1080git config --global https.proxy socks5://127.0.0.1:1080# 取消代理git config --global --unset http.proxygit config --global --unset https.proxy 方法二 直接修改配置文件12345678910111213# 打开git配置文件nano ~/.gitconfig# 复制以下配置 ctrl+shift+v 粘贴 ctrl+x 输入y保存[https]proxy = https://127.0.0.1:1080[http]proxy = http://127.0.0.1:1080[http] proxy = socks5://127.0.0.1:1080[https] proxy = socks5://127.0.0.1:1080","tags":[{"name":"git","slug":"git","permalink":"https://benxin.xyz/tags/git/"}]},{"title":"使用Termux 远程连接linux ，及使用python在手机上搭建一个简单的资源共享服务器。","date":"2019-08-01T14:23:59.423Z","path":"2019/08/01/Termux/","text":"Termux是一个Android终端模拟器和Linux环境应用程序，可直接使用，无需root或设置。自动安装最小基本系统，使用APT包管理器可以使用其他软件包。Termux 安装Google PlayF-Droid更换源文件及安装一些必要的软件12345678910# 添加国内的源文件,默认的是国外的,安装软件比较慢# 编辑源文件vi $PREFIX/etc/apt/sources.listdeb https://mirrors.ustc.edu.cn/termux stable maindeb https://mirrors.tuna.tsinghua.edu.cn/termux stable main# 或使用echo命令echo \"deb https://mirrors.ustc.edu.cn/termux stable main\" &gt;&gt; $PREFIX/etc/apt/sources.listecho \"deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main\" &gt;&gt; $PREFIX/etc/apt/sources.listapt update PC 连接到手机1234567891011121314151617181920212223242526272829303132# 安装一些必要的软件apt install git vim zsh curl openssh python -y# 手机端生成密钥ssh-keygenssh-keygen -b 4096 -t rsa# 将生产的密钥复制到远程计算机ssh-copy-id username@your_ip -p your_ip# username计算机名可以使用whoami命令查看, your_ip 使用ip -a 命令查看# Linux ssh默认端口22 如果你修改过忘记了 使用vim 打开查看,如果开了防火墙请将端口号放行vi /etc/ssh/sshd_config # 找到port这行查看# 请参考我的进行替换 ssh-copy-id benxin@10.0.0.5 -p 2333 # 做完以上这些你就可以从Linux计算机使用ssh连接你的手机# whoami 手机上使用whoami查看用户名一般是u开头的 # termux 默认端口号 8022 可以自定义 0---65535 可以使用知名端口以外的其它端口sshd -p 233 # 设置端口号为233# Linux上使用ssh命令连接你的Android手机# 将u0_xx和10.0.0.8 替换成你自己的ssh u0_xx@10.0.0.8 -p 8022# 连接成功后可以在Linux执行下面的操作,手机上操作非常不方便.# 安装zsh替换默认的bashsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"vim .zshrc # 更改主题,修改zsh配置文件的这一行,不想修改可跳过ZSH_THEME=\"ys\"# 切换终端的shellchsh -s zsh# 简化命令alias psr='python -m http.server'alias h='history'alias clr='clear' Linux连接Android 连接pc1234# username计算机名可以使用whoami命令查看, your_ip 使用ip -a 命令查看 # Linux 默认端口22 如果你修改过忘记了 使用vim 打开查看,如果开了防火墙请将端口号放行vi /etc/ssh/sshd_configssh username@your_ip -p 2333 连接成功后可以使用手机控制Linux执行一些简单的操作 外部储存访问123456# 外部储存访问参考文档 https://wiki.termux.com/wiki/Termux-setup-storage# 执行以下命令termux-setup-storage$HOME/storage/# 禁用震动提示在`$HOME/.termux/termux.properties`文件中配置`bell-character = ignore` 获取 su权限123456git clone https://gitlab.com/st42/termux-sudo.git# 如果安装 ncurses-utils 报错,请安装这个版本的ncurses 再次执行3行的命令# apt install ncurses=6.1.20190511-5cd termux-sudo &amp;&amp; pkg install ncurses-utilscat sudo &gt; /data/data/com.termux/files/usr/bin/sudo chmod 700 /data/data/com.termux/files/usr/bin/sudo 在 Android 运行Termux app使用python做一些有趣的事使用python运行一个简单的http服务器 ,实现局域网pc共享手机资源. python -m http.server 在手机上桥这一段还是不太方便,可以试试 psr (alias psr=&apos;python -m http.server&apos; 之前将这行代码)简单的静态http server 如果你觉得功能太过简陋不能满足你的需求,你还可以使用python写一个功能更加完善的服务器更好的共享资源，也可以在上面跑rRequests 爬虫库使用爬虫抓取想要的资源。 使用PC端的浏览器预览手机资源也非常方便,局域的其它设备都可以访问.在浏览器输入手机的IP和端口号即可访问手机资源 例如 10.0.0.4:8000 在上图中可以看到局域网的IP 10.0.0.2 发送了一个GET请求，响应状态码200 请求成功！主目录 预览图片资源 播放媒体文件","tags":[{"name":"Termux","slug":"Termux","permalink":"https://benxin.xyz/tags/Termux/"}]},{"title":"Git 配置SSH密钥","date":"2019-08-01T14:23:59.419Z","path":"2019/08/01/Git 配置SSH密钥/","text":"Git 配置SSH密钥 生成SSH密钥1ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 查看生成的密钥 并复制密钥1cat ~/.ssh/id_rsa.pub 将密钥配置到GitHub https 免密码配置 新建文件保存密码 1vim ~/.git-credentials 添加以下内容1https://&#123;username&#125;:&#123;passwd&#125;@github.com 添加git配置1git config --global credential.helper store 查看变化12cat ~/.gitconfigssh -T git@github.com","tags":[{"name":"git","slug":"git","permalink":"https://benxin.xyz/tags/git/"}]}]